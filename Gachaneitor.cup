package gachaneitor;

import java_cup.runtime.*;
import java.io.*;

import java.util.ArrayList;

// class GachaneitorParser;

/* ---------------------- User code ---------------------- */
parser code {:
    public static BufferedWriter writer;
    public static boolean error;

    public static ArrayList<Ingredient> listaIngredientes;
    public static ArrayList<String> listaIds;
	
    public static void main(String[] args) throws Exception {
		FileInputStream file = new FileInputStream(args[0]);

        String targetName = args[0].replace(".txt", ".gachacode");
        writer = new BufferedWriter(new FileWriter(new File(targetName)));

        listaIngredientes = new ArrayList<Ingredient>();
        listaIds = new ArrayList<String>();

        error = false;

		try {
			Reader reader = new InputStreamReader(file);
			new parser(new Lexer(reader)).parse();
			reader.close();
		}
		catch (Exception e) {
			System.out.println("Analysis error");
			System.exit(1);
        }

        for(Ingredient i : listaIngredientes) {
            if(i.getAmmount().getNum() > 0) {
                System.out.println("Warning!: not fully used ingredient <" + i.getName() + ">");
            }
        }

        writer.close();
        if(error) {
            File targetFile = new File(targetName);
            targetFile.delete();
        }
        
		System.out.println("Analysis completed!");
 	}

    @Override
	public void report_error(String message, Object info) {
        error = true;
        System.err.println("Syntax error in line " + (cur_token.left + 1) + ", column " + (cur_token.right + 1) + ": " + message);
    }

    @Override
    public void report_fatal_error(String message, Object info) {
        report_error(message, info);
        System.exit(1);
    }

    @Override
    public void syntax_error(Symbol cur_token) {}

    class Ingredient {

        private String name;
        private Ammount ammount;

        public Ingredient(String name, Ammount ammount) {
            this.name = name;
            this.ammount = ammount;
        }

        public String getName() {
            return this.name;
        }

        public Ammount getAmmount() {
            return this.ammount;
        }

        public boolean reduce(Ingredient ingre) {
    	    this.ammount.setNum(this.ammount.getNum() - ingre.getAmmount().getNum());
    	
    	    if(this.ammount.getNum() < 0)
    		    return false;
    	    else
    		    return true;
        }

        public boolean checkMeasure(Ingredient ingre) {
            if(this.ammount.getType().equals(ingre.getAmmount().getType()))
                return true;
            else
                return false;
        }

        public String toString() {
            if(ammount.getType().equals("al_gusto")) {
                return "\"" + ammount.getType() + "\",\"" + name + "\"";
            } else {
                return "\"" + this.ammount.getNum() + ammount.getType() + "\",\"" + name + "\"";
            }
        }
    }

    class Ammount {

        private int num;
        private String type;

        public Ammount(int num, String type) {
            this.num = num;
            this.type = type;
        }

        public int getNum() {
		    return num;
	    }

	    public void setNum(int num) {
		    this.num = num;
	    }

        public String getType() {
		    return type;
	    }
    }

:}

/* ------------------- Grammar Symbols ------------------- */

terminal String string, id, velocidad, medida;
terminal Integer temp, number, timer, duracion;
terminal paren_izq, paren_der, llave_izq, llave_der, dos_puntos, coma, punto_coma,
        menu, plato, info, nombre, usuario, raciones, tiempo, calorias, tipo, cocina,
        programar, calentar, remover, anadir, sacar, varoma, inverso, al_gusto;

non terminal Integer TEMPERATURA, VELOCIDAD, RACIONES, TIEMPO_TOTAL, CALORIAS;
non terminal Boolean INVERSO;
non terminal Ammount CANTIDAD;
non terminal Ingredient INGREDIENTE;
non terminal String NOMBRE, USUARIO, TIPO, COCINA;
non terminal MENU, LISTA_INGREDIENTES, LISTA_PLATOS, PLATO, LISTA_INSTRUCCIONES, CABECERA,
        INSTRUCCION, PROGRAMAR, CALENTAR, REMOVER, ACCION_USUARIO, ANADIR, SACAR;

/* --------------------- Precedences --------------------- */


/* ----------------------- Grammar ----------------------- */

MENU ::= menu id llave_izq NOMBRE LISTA_INGREDIENTES LISTA_PLATOS llave_der;

LISTA_INGREDIENTES ::= INGREDIENTE:ingre {: if(listaIds.contains(ingre.getName()))
                                                parser.report_error("duplicate ingredient <" + ingre.getName() + ">", null);
                                            else {
                                                listaIds.add(ingre.getName());
                                                parser.listaIngredientes.add(ingre);
                                            } 
                                        :} punto_coma LISTA_INGREDIENTES 
    | ;
LISTA_PLATOS ::= PLATO LISTA_PLATOS | PLATO;

PLATO ::= plato id llave_izq CABECERA LISTA_INGREDIENTES LISTA_INSTRUCCIONES llave_der;

LISTA_INSTRUCCIONES ::= INSTRUCCION LISTA_INSTRUCCIONES | ;

CABECERA ::= info llave_izq NOMBRE:name USUARIO:user RACIONES:rations TIEMPO_TOTAL:duration CALORIAS:cal TIPO:tipo COCINA:cocina llave_der
    {: parser.writer.write("info(\"" + name + "\",\"" + user + "\"," + rations + "," + duration + "," + cal + ",\"" + tipo + "\",\"" + cocina + "\")\n"); :};

NOMBRE ::= nombre dos_puntos string:name punto_coma {: RESULT=name; :}
    | nombre dos_puntos string error {:parser.report_error("expected ';'", null);:}
    | nombre string error {:parser.report_error("expected ':'", null);:} punto_coma;

USUARIO ::= usuario dos_puntos id:user punto_coma {: RESULT=user; :}
    | usuario dos_puntos id error {:parser.report_error("expected ';'", null);:}
    | usuario error {:parser.report_error("expected ':'", null);:} id punto_coma ;

RACIONES ::= raciones dos_puntos number:rations punto_coma {: RESULT=rations; :}
    | raciones dos_puntos number error {:parser.report_error("expected ';'", null);:}
    | raciones error {:parser.report_error("expected ':'", null);:} number punto_coma;

TIEMPO_TOTAL ::= tiempo dos_puntos duracion:duration punto_coma {: RESULT=duration; :}
    | tiempo dos_puntos duracion error {:parser.report_error("expected ';'", null);:}
    | tiempo error {:parser.report_error("expected ':'", null);:} duracion punto_coma;

CALORIAS ::= calorias dos_puntos number:cal punto_coma {: RESULT=cal; :}
    | calorias dos_puntos number error {:parser.report_error("expected ';'", null);:}
    | calorias error {:parser.report_error("expected ':'", null);:} number punto_coma
    | ;

TIPO ::= tipo dos_puntos string:tipo punto_coma {: RESULT=tipo; :}
    | tipo dos_puntos string error {:parser.report_error("expected ';'", null);:}
    | tipo error {:parser.report_error("expected ':'", null);:} string punto_coma 
    | ;

COCINA ::= cocina dos_puntos string:cocina punto_coma {: RESULT=cocina; :}
    | cocina dos_puntos string error {:parser.report_error("expected ';'", null);:}
    | cocina error {:parser.report_error("expected ':'", null);:} string punto_coma
    | ;

INSTRUCCION ::= PROGRAMAR | ANADIR | CALENTAR | REMOVER | ACCION_USUARIO | SACAR;

PROGRAMAR ::= programar paren_izq TEMPERATURA:temperature coma VELOCIDAD:speed coma timer:time INVERSO:reverse paren_der punto_coma
    {: parser.writer.write("program(" + temperature.toString() + "," + speed.toString() + "," + time.toString() + "," + reverse.toString() + ")\n"); :}
    | programar paren_izq TEMPERATURA coma VELOCIDAD coma timer INVERSO paren_der error {:parser.report_error("expected ';'", null);:}
    | programar error {:parser.report_error("expected '('", null);:} TEMPERATURA coma VELOCIDAD coma timer INVERSO paren_der punto_coma
    | programar paren_izq TEMPERATURA error {:parser.report_error("expected ','", null);:} VELOCIDAD coma timer INVERSO paren_der punto_coma
    | programar paren_izq TEMPERATURA coma VELOCIDAD error {:parser.report_error("expected ','", null);:} timer INVERSO paren_der punto_coma
    | programar paren_izq TEMPERATURA coma VELOCIDAD coma timer INVERSO error {:parser.report_error("expected ')'", null);:} punto_coma;

ANADIR ::= anadir paren_izq INGREDIENTE:ingre paren_der punto_coma {:   boolean enc = false;
                                                                        for(Ingredient i : listaIngredientes) {
                                                                            if(i.getName().equals(ingre.getName())) {
                                                                                enc = true;
                                                                                if(!i.reduce(ingre)) {
					                                                                parser.report_error("overuse of the ingredient <" + i.getName() + ">", null);
				                                                                }
                                                                                if(!i.checkMeasure(ingre)) {
                                                                                    parser.report_error("use of different measures in the ingredient <" + i.getName() + ">", null);
                                                                                }
                                                                            }
                                                                        }

                                                                        if(!enc) {
                                                                            parser.report_error("undefined ingredient <" + ingre.getName() + ">", null);
                                                                        } else {
                                                                            parser.writer.write("add(" + ingre.toString() + ")\n");
                                                                        }
                                                                    :}
    | anadir paren_izq id paren_der error {:parser.report_error("expected ';'", null);:}
    | anadir paren_izq string paren_der error {:parser.report_error("expected ';'", null);:}
    | anadir error {:parser.report_error("expected '('", null);:} id paren_der punto_coma
    | anadir paren_izq id error {:parser.report_error("expected ')'", null);:} punto_coma
    | anadir error {:parser.report_error("expected '('", null);:} string paren_der punto_coma
    | anadir paren_izq string error {:parser.report_error("expected ')'", null);:} punto_coma;

CALENTAR ::= calentar paren_izq TEMPERATURA:temperature coma timer:time paren_der punto_coma
    {: parser.writer.write("program(" + temperature.toString() + ", 0," + time.toString() + ")\n"); :}
    | calentar paren_izq TEMPERATURA coma timer paren_der error {:parser.report_error("expected ';'", null);:}
    | calentar error {:parser.report_error("expected '('", null);:} TEMPERATURA coma timer paren_der punto_coma
    | calentar paren_izq TEMPERATURA coma timer error {:parser.report_error("expected ')'", null);:} punto_coma;

REMOVER ::= remover paren_izq VELOCIDAD:speed coma timer:time INVERSO:reverse paren_der punto_coma
    {: parser.writer.write("program(0," + speed.toString() + "," + time.toString() + "," + reverse.toString() + ")\n"); :}
    | remover paren_izq VELOCIDAD coma timer INVERSO paren_der error {:parser.report_error("expected ';'", null);:}
    | remover paren_izq VELOCIDAD error {:parser.report_error("expected ','", null);:} timer INVERSO paren_der punto_coma
    | remover error {:parser.report_error("expected '('", null);:} VELOCIDAD coma timer INVERSO paren_der punto_coma
    | remover paren_izq VELOCIDAD coma timer INVERSO error {:parser.report_error("expected ')'", null);:} punto_coma;

ACCION_USUARIO ::= string:action punto_coma {: parser.writer.write("useraction(\"" + action + "\")\n"); :}
    | string error {:parser.report_error("expected ';'", null);:};

SACAR ::= sacar paren_izq string:content paren_der punto_coma {: parser.writer.write("take(\"" + content + "\")\n"); :}
    | sacar paren_izq string paren_der error {:parser.report_error("expected ';'", null);:}
    | sacar error {:parser.report_error("expected '('", null);:} string paren_der punto_coma
    | sacar paren_izq string error {:parser.report_error("expected ')'", null);:} punto_coma;

INVERSO ::= coma inverso {: RESULT=true; :} | {: RESULT=false; :};
INGREDIENTE ::= CANTIDAD:cant id:ingre {: RESULT=new Ingredient(ingre, cant); :};
CANTIDAD ::= al_gusto {: RESULT=new Ammount(0, "al_gusto"); :} 
    | number:num medida:med {: RESULT=new Ammount(num, med); :};
TEMPERATURA ::= temp:temperature {: if(temperature < 30) {
                                        temperature = 30;
                                        System.out.println("Warning!: the temperature must be above 30°C.");
                                    }
                                    else if(temperature > 120){
                                        temperature = 120;
                                        System.out.println("Warning!: the temperature must be below 120°C.");
                                    }
                                    RESULT=temperature; :} 
    | varoma {: RESULT=-30; :};
VELOCIDAD ::= number:num {: RESULT=num; :} 
    | velocidad:type {: if(type.equals("cuchara")) RESULT=-1;
                        else if(type.equals("espiga")) RESULT=-2;
                        else if(type.equals("turbo")) RESULT=-3; :};