
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package gachaneitor;

import java_cup.runtime.*;
import java.io.*;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\144\000\002\002\011\000\002\002\004\000\002\003" +
    "\005\000\002\003\002\000\002\004\004\000\002\004\003" +
    "\000\002\005\011\000\002\006\004\000\002\006\002\000" +
    "\002\007\014\000\002\010\006\000\002\010\006\000\002" +
    "\033\002\000\002\010\007\000\002\011\006\000\002\011" +
    "\006\000\002\034\002\000\002\011\007\000\002\012\006" +
    "\000\002\012\006\000\002\035\002\000\002\012\007\000" +
    "\002\013\006\000\002\013\006\000\002\036\002\000\002" +
    "\013\007\000\002\014\006\000\002\014\006\000\002\037" +
    "\002\000\002\014\007\000\002\014\002\000\002\015\006" +
    "\000\002\015\006\000\002\040\002\000\002\015\007\000" +
    "\002\015\002\000\002\016\006\000\002\016\006\000\002" +
    "\041\002\000\002\016\007\000\002\016\002\000\002\017" +
    "\003\000\002\017\003\000\002\017\003\000\002\017\003" +
    "\000\002\017\003\000\002\017\003\000\002\020\014\000" +
    "\002\020\014\000\002\042\002\000\002\020\015\000\002" +
    "\043\002\000\002\020\015\000\002\044\002\000\002\020" +
    "\015\000\002\045\002\000\002\020\015\000\002\025\007" +
    "\000\002\025\007\000\002\025\007\000\002\025\007\000" +
    "\002\046\002\000\002\025\010\000\002\047\002\000\002" +
    "\025\010\000\002\050\002\000\002\025\010\000\002\051" +
    "\002\000\002\025\010\000\002\022\011\000\002\022\011" +
    "\000\002\052\002\000\002\022\012\000\002\053\002\000" +
    "\002\022\012\000\002\023\012\000\002\023\012\000\002" +
    "\054\002\000\002\023\013\000\002\055\002\000\002\023" +
    "\013\000\002\056\002\000\002\023\013\000\002\024\004" +
    "\000\002\024\004\000\002\026\007\000\002\026\007\000" +
    "\002\057\002\000\002\026\010\000\002\060\002\000\002" +
    "\026\010\000\002\021\004\000\002\021\002\000\002\031" +
    "\004\000\002\032\003\000\002\032\004\000\002\027\003" +
    "\000\002\027\003\000\002\030\003\000\002\030\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\356\000\004\021\005\001\002\000\004\002\360\001" +
    "\002\000\004\017\006\001\002\000\004\006\007\001\002" +
    "\000\004\024\011\001\002\000\010\016\025\022\ufffe\044" +
    "\024\001\002\000\006\010\012\020\013\001\002\000\004" +
    "\020\017\001\002\000\004\003\014\001\002\000\004\012" +
    "\ufff5\001\002\000\004\012\016\001\002\000\012\016\ufff4" +
    "\022\ufff4\025\ufff4\044\ufff4\001\002\000\006\003\020\012" +
    "\021\001\002\000\012\016\ufff6\022\ufff6\025\ufff6\044\ufff6" +
    "\001\002\000\012\016\ufff7\022\ufff7\025\ufff7\044\ufff7\001" +
    "\002\000\004\022\033\001\002\000\004\017\032\001\002" +
    "\000\004\017\uffa3\001\002\000\004\043\031\001\002\000" +
    "\004\012\027\001\002\000\026\007\ufffe\016\025\020\ufffe" +
    "\022\ufffe\033\ufffe\034\ufffe\035\ufffe\036\ufffe\037\ufffe\044" +
    "\024\001\002\000\022\007\uffff\020\uffff\022\uffff\033\uffff" +
    "\034\uffff\035\uffff\036\uffff\037\uffff\001\002\000\004\017" +
    "\uffa2\001\002\000\004\012\uffa4\001\002\000\004\017\040" +
    "\001\002\000\006\007\ufffc\022\033\001\002\000\004\007" +
    "\036\001\002\000\004\002\001\001\002\000\004\007\ufffd" +
    "\001\002\000\004\006\041\001\002\000\004\023\042\001" +
    "\002\000\004\006\261\001\002\000\024\007\ufffe\016\025" +
    "\020\ufffe\033\ufffe\034\ufffe\035\ufffe\036\ufffe\037\ufffe\044" +
    "\024\001\002\000\020\007\ufff9\020\052\033\054\034\057" +
    "\035\061\036\046\037\053\001\002\000\020\007\ufff9\020" +
    "\052\033\054\034\057\035\061\036\046\037\053\001\002" +
    "\000\006\003\230\004\231\001\002\000\020\007\uffd3\020" +
    "\uffd3\033\uffd3\034\uffd3\035\uffd3\036\uffd3\037\uffd3\001\002" +
    "\000\020\007\uffd6\020\uffd6\033\uffd6\034\uffd6\035\uffd6\036" +
    "\uffd6\037\uffd6\001\002\000\020\007\uffd5\020\uffd5\033\uffd5" +
    "\034\uffd5\035\uffd5\036\uffd5\037\uffd5\001\002\000\006\003" +
    "\226\012\227\001\002\000\006\003\211\004\212\001\002" +
    "\000\006\003\144\004\145\001\002\000\020\007\uffd7\020" +
    "\uffd7\033\uffd7\034\uffd7\035\uffd7\036\uffd7\037\uffd7\001\002" +
    "\000\020\007\uffd8\020\uffd8\033\uffd8\034\uffd8\035\uffd8\036" +
    "\uffd8\037\uffd8\001\002\000\006\003\121\004\122\001\002" +
    "\000\020\007\uffd4\020\uffd4\033\uffd4\034\uffd4\035\uffd4\036" +
    "\uffd4\037\uffd4\001\002\000\006\003\064\004\065\001\002" +
    "\000\004\007\063\001\002\000\006\007\ufffb\022\ufffb\001" +
    "\002\000\006\016\uffb2\041\uffb2\001\002\000\006\016\070" +
    "\041\067\001\002\000\006\003\071\011\072\001\002\000" +
    "\006\003\uff9e\011\uff9e\001\002\000\006\003\uff9f\011\uff9f" +
    "\001\002\000\004\015\uffb4\001\002\000\004\015\073\001" +
    "\002\000\010\003\uffa5\005\uffa5\011\074\001\002\000\004" +
    "\042\104\001\002\000\006\003\076\005\077\001\002\000" +
    "\004\012\uffb0\001\002\000\006\003\100\012\101\001\002" +
    "\000\020\007\uffb5\020\uffb5\033\uffb5\034\uffb5\035\uffb5\036" +
    "\uffb5\037\uffb5\001\002\000\020\007\uffb6\020\uffb6\033\uffb6" +
    "\034\uffb6\035\uffb6\036\uffb6\037\uffb6\001\002\000\004\012" +
    "\103\001\002\000\020\007\uffaf\020\uffaf\033\uffaf\034\uffaf" +
    "\035\uffaf\036\uffaf\037\uffaf\001\002\000\006\003\uffa6\005" +
    "\uffa6\001\002\000\004\015\106\001\002\000\006\005\uffa5" +
    "\011\074\001\002\000\004\005\110\001\002\000\004\012" +
    "\111\001\002\000\020\007\uffb3\020\uffb3\033\uffb3\034\uffb3" +
    "\035\uffb3\036\uffb3\037\uffb3\001\002\000\006\016\070\041" +
    "\067\001\002\000\004\011\114\001\002\000\004\015\115" +
    "\001\002\000\006\005\uffa5\011\074\001\002\000\004\005" +
    "\117\001\002\000\004\012\120\001\002\000\020\007\uffb1" +
    "\020\uffb1\033\uffb1\034\uffb1\035\uffb1\036\uffb1\037\uffb1\001" +
    "\002\000\006\014\uffba\040\uffba\001\002\000\006\014\124" +
    "\040\125\001\002\000\004\011\126\001\002\000\006\003" +
    "\uffa1\011\uffa1\001\002\000\006\003\uffa0\011\uffa0\001\002" +
    "\000\004\015\127\001\002\000\006\003\130\005\131\001" +
    "\002\000\004\012\uffb8\001\002\000\006\003\132\012\133" +
    "\001\002\000\020\007\uffbb\020\uffbb\033\uffbb\034\uffbb\035" +
    "\uffbb\036\uffbb\037\uffbb\001\002\000\020\007\uffbc\020\uffbc" +
    "\033\uffbc\034\uffbc\035\uffbc\036\uffbc\037\uffbc\001\002\000" +
    "\004\012\135\001\002\000\020\007\uffb7\020\uffb7\033\uffb7" +
    "\034\uffb7\035\uffb7\036\uffb7\037\uffb7\001\002\000\006\014" +
    "\124\040\125\001\002\000\004\011\140\001\002\000\004" +
    "\015\141\001\002\000\004\005\142\001\002\000\004\012" +
    "\143\001\002\000\020\007\uffb9\020\uffb9\033\uffb9\034\uffb9" +
    "\035\uffb9\036\uffb9\037\uffb9\001\002\000\006\014\uffd0\040" +
    "\uffd0\001\002\000\006\014\124\040\125\001\002\000\006" +
    "\003\147\011\150\001\002\000\006\016\uffce\041\uffce\001" +
    "\002\000\006\016\070\041\067\001\002\000\006\003\152" +
    "\011\153\001\002\000\004\015\uffcc\001\002\000\004\015" +
    "\154\001\002\000\010\003\uffa5\005\uffa5\011\074\001\002" +
    "\000\006\003\156\005\157\001\002\000\004\012\uffca\001" +
    "\002\000\006\003\160\012\161\001\002\000\020\007\uffd1" +
    "\020\uffd1\033\uffd1\034\uffd1\035\uffd1\036\uffd1\037\uffd1\001" +
    "\002\000\020\007\uffd2\020\uffd2\033\uffd2\034\uffd2\035\uffd2" +
    "\036\uffd2\037\uffd2\001\002\000\004\012\163\001\002\000" +
    "\020\007\uffc9\020\uffc9\033\uffc9\034\uffc9\035\uffc9\036\uffc9" +
    "\037\uffc9\001\002\000\004\015\165\001\002\000\006\005" +
    "\uffa5\011\074\001\002\000\004\005\167\001\002\000\004" +
    "\012\170\001\002\000\020\007\uffcb\020\uffcb\033\uffcb\034" +
    "\uffcb\035\uffcb\036\uffcb\037\uffcb\001\002\000\006\016\070" +
    "\041\067\001\002\000\004\011\173\001\002\000\004\015" +
    "\174\001\002\000\006\005\uffa5\011\074\001\002\000\004" +
    "\005\176\001\002\000\004\012\177\001\002\000\020\007" +
    "\uffcd\020\uffcd\033\uffcd\034\uffcd\035\uffcd\036\uffcd\037\uffcd" +
    "\001\002\000\006\014\124\040\125\001\002\000\004\011" +
    "\202\001\002\000\006\016\070\041\067\001\002\000\004" +
    "\011\204\001\002\000\004\015\205\001\002\000\006\005" +
    "\uffa5\011\074\001\002\000\004\005\207\001\002\000\004" +
    "\012\210\001\002\000\020\007\uffcf\020\uffcf\033\uffcf\034" +
    "\uffcf\035\uffcf\036\uffcf\037\uffcf\001\002\000\004\020\uffaa" +
    "\001\002\000\004\020\213\001\002\000\006\003\214\005" +
    "\215\001\002\000\004\012\uffa8\001\002\000\006\003\216" +
    "\012\217\001\002\000\020\007\uffab\020\uffab\033\uffab\034" +
    "\uffab\035\uffab\036\uffab\037\uffab\001\002\000\020\007\uffac" +
    "\020\uffac\033\uffac\034\uffac\035\uffac\036\uffac\037\uffac\001" +
    "\002\000\004\012\221\001\002\000\020\007\uffa7\020\uffa7" +
    "\033\uffa7\034\uffa7\035\uffa7\036\uffa7\037\uffa7\001\002\000" +
    "\004\020\223\001\002\000\004\005\224\001\002\000\004" +
    "\012\225\001\002\000\020\007\uffa9\020\uffa9\033\uffa9\034" +
    "\uffa9\035\uffa9\036\uffa9\037\uffa9\001\002\000\020\007\uffad" +
    "\020\uffad\033\uffad\034\uffad\035\uffad\036\uffad\037\uffad\001" +
    "\002\000\020\007\uffae\020\uffae\033\uffae\034\uffae\035\uffae" +
    "\036\uffae\037\uffae\001\002\000\006\017\uffc4\020\uffc0\001" +
    "\002\000\006\017\233\020\232\001\002\000\006\003\242" +
    "\005\243\001\002\000\006\003\234\005\235\001\002\000" +
    "\004\012\uffc2\001\002\000\006\003\236\012\237\001\002" +
    "\000\020\007\uffc6\020\uffc6\033\uffc6\034\uffc6\035\uffc6\036" +
    "\uffc6\037\uffc6\001\002\000\020\007\uffc8\020\uffc8\033\uffc8" +
    "\034\uffc8\035\uffc8\036\uffc8\037\uffc8\001\002\000\004\012" +
    "\241\001\002\000\020\007\uffc1\020\uffc1\033\uffc1\034\uffc1" +
    "\035\uffc1\036\uffc1\037\uffc1\001\002\000\004\012\uffbe\001" +
    "\002\000\006\003\244\012\245\001\002\000\020\007\uffc5" +
    "\020\uffc5\033\uffc5\034\uffc5\035\uffc5\036\uffc5\037\uffc5\001" +
    "\002\000\020\007\uffc7\020\uffc7\033\uffc7\034\uffc7\035\uffc7" +
    "\036\uffc7\037\uffc7\001\002\000\004\012\247\001\002\000" +
    "\020\007\uffbd\020\uffbd\033\uffbd\034\uffbd\035\uffbd\036\uffbd" +
    "\037\uffbd\001\002\000\004\020\255\001\002\000\004\017" +
    "\252\001\002\000\004\005\253\001\002\000\004\012\254" +
    "\001\002\000\020\007\uffc3\020\uffc3\033\uffc3\034\uffc3\035" +
    "\uffc3\036\uffc3\037\uffc3\001\002\000\004\005\256\001\002" +
    "\000\004\012\257\001\002\000\020\007\uffbf\020\uffbf\033" +
    "\uffbf\034\uffbf\035\uffbf\036\uffbf\037\uffbf\001\002\000\004" +
    "\007\ufffa\001\002\000\004\024\011\001\002\000\004\025" +
    "\264\001\002\000\004\026\276\001\002\000\006\003\265" +
    "\010\266\001\002\000\004\017\ufff1\001\002\000\004\017" +
    "\267\001\002\000\006\003\270\012\271\001\002\000\004" +
    "\026\ufff2\001\002\000\004\026\ufff3\001\002\000\004\017" +
    "\273\001\002\000\004\012\274\001\002\000\004\026\ufff0" +
    "\001\002\000\004\027\310\001\002\000\006\003\300\010" +
    "\277\001\002\000\004\016\304\001\002\000\004\016\uffed" +
    "\001\002\000\004\016\302\001\002\000\004\012\303\001" +
    "\002\000\004\027\uffec\001\002\000\006\003\305\012\306" +
    "\001\002\000\004\027\uffee\001\002\000\004\027\uffef\001" +
    "\002\000\012\007\uffe3\030\322\031\uffe3\032\uffe3\001\002" +
    "\000\006\003\311\010\312\001\002\000\004\013\uffe9\001" +
    "\002\000\004\013\313\001\002\000\006\003\314\012\315" +
    "\001\002\000\012\007\uffea\030\uffea\031\uffea\032\uffea\001" +
    "\002\000\012\007\uffeb\030\uffeb\031\uffeb\032\uffeb\001\002" +
    "\000\004\013\317\001\002\000\004\012\320\001\002\000" +
    "\012\007\uffe8\030\uffe8\031\uffe8\032\uffe8\001\002\000\010" +
    "\007\uffde\031\333\032\uffde\001\002\000\006\003\323\010" +
    "\324\001\002\000\004\016\uffe5\001\002\000\004\016\325" +
    "\001\002\000\006\003\326\012\327\001\002\000\010\007" +
    "\uffe6\031\uffe6\032\uffe6\001\002\000\010\007\uffe7\031\uffe7" +
    "\032\uffe7\001\002\000\004\016\331\001\002\000\004\012" +
    "\332\001\002\000\010\007\uffe4\031\uffe4\032\uffe4\001\002" +
    "\000\006\003\350\010\351\001\002\000\006\007\uffd9\032" +
    "\336\001\002\000\004\007\347\001\002\000\006\003\337" +
    "\010\340\001\002\000\004\020\uffdb\001\002\000\004\020" +
    "\341\001\002\000\006\003\342\012\343\001\002\000\004" +
    "\007\uffdc\001\002\000\004\007\uffdd\001\002\000\004\020" +
    "\345\001\002\000\004\012\346\001\002\000\004\007\uffda" +
    "\001\002\000\024\007\ufff8\016\ufff8\020\ufff8\033\ufff8\034" +
    "\ufff8\035\ufff8\036\ufff8\037\ufff8\044\ufff8\001\002\000\004" +
    "\020\uffe0\001\002\000\004\020\352\001\002\000\006\003" +
    "\353\012\354\001\002\000\006\007\uffe1\032\uffe1\001\002" +
    "\000\006\007\uffe2\032\uffe2\001\002\000\004\020\356\001" +
    "\002\000\004\012\357\001\002\000\006\007\uffdf\032\uffdf" +
    "\001\002\000\004\002\000\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\356\000\004\002\003\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\010\007\001\001" +
    "\000\010\003\021\031\025\032\022\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\033\014" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\004\034" +
    "\005\033\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\010\003\027\031\025" +
    "\032\022\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\004\036\005\033" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\007\042\001\001\000\002" +
    "\001\001\000\010\003\043\031\025\032\022\001\001\000" +
    "\022\006\061\017\044\020\055\022\047\023\050\024\057" +
    "\025\054\026\046\001\001\000\022\006\257\017\044\020" +
    "\055\022\047\023\050\024\057\025\054\026\046\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\055\111\001\001\000\004\030" +
    "\065\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\054\104\001\001\000\002\001\001\000" +
    "\004\021\074\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\056\101\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\021\106\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\030\112\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\021\115\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\052\135\001\001\000" +
    "\004\027\122\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\053\133\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\027\136\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\042\177\001\001\000\004\027\145\001\001\000\002" +
    "\001\001\000\004\043\170\001\001\000\004\030\150\001" +
    "\001\000\002\001\001\000\004\044\163\001\001\000\002" +
    "\001\001\000\004\021\154\001\001\000\002\001\001\000" +
    "\004\045\161\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\021\165\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\030\171\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\021\174" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\027\200\001\001\000\002\001\001\000\004" +
    "\030\202\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\021\205\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\057\221\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\060\217\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\046\250\050\247\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\047" +
    "\237\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\051" +
    "\245\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\010\261\001\001" +
    "\000\004\011\262\001\001\000\004\012\274\001\001\000" +
    "\002\001\001\000\004\034\271\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\013\306\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\035\300\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\014\320\001\001\000\002\001\001" +
    "\000\004\036\315\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\015\333\001" +
    "\001\000\002\001\001\000\004\037\327\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\016\334\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\041\343\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\040\354\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



	
    public static void main(String[] args) throws Exception {
		FileInputStream file = new FileInputStream(args[0]);
		try {
			Reader reader = new InputStreamReader(file);
			new parser(new Lexer(reader)).parse();
			reader.close();
		}
		catch (Exception e) {
			System.out.println("Analysis error");
			System.exit(1);
        }
		System.out.println("Analysis completed!");
 	}

    @Override
	public void report_error(String message, Object info) {
        System.err.println("Syntax error in line " + (cur_token.left + 1) + ", column " + (cur_token.right + 1) + ": " + message);
    }

    @Override
    public void report_fatal_error(String message, Object info) {
        report_error(message, info);
        System.exit(1);
    }

    @Override
    public void syntax_error(Symbol cur_token) {}



/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$parser$actions {
  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$parser$do_action_part00000000(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // MENU ::= menu id llave_izq NOMBRE LISTA_INGREDIENTES LISTA_PLATOS llave_der 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("MENU",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= MENU EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // LISTA_INGREDIENTES ::= INGREDIENTE punto_coma LISTA_INGREDIENTES 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("LISTA_INGREDIENTES",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // LISTA_INGREDIENTES ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("LISTA_INGREDIENTES",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // LISTA_PLATOS ::= PLATO LISTA_PLATOS 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("LISTA_PLATOS",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // LISTA_PLATOS ::= PLATO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("LISTA_PLATOS",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // PLATO ::= plato id llave_izq CABECERA LISTA_INGREDIENTES LISTA_INSTRUCCIONES llave_der 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PLATO",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // LISTA_INSTRUCCIONES ::= INSTRUCCION LISTA_INSTRUCCIONES 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("LISTA_INSTRUCCIONES",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // LISTA_INSTRUCCIONES ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("LISTA_INSTRUCCIONES",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // CABECERA ::= info llave_izq NOMBRE USUARIO RACIONES TIEMPO_TOTAL CALORIAS TIPO COCINA llave_der 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CABECERA",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // NOMBRE ::= nombre dos_puntos string punto_coma 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("NOMBRE",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // NOMBRE ::= nombre dos_puntos string error 
            {
              Object RESULT =null;
		parser.report_error("expected ';'", null);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NOMBRE",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // NT$0 ::= 
            {
              Object RESULT =null;
parser.report_error("expected ':'", null);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$0",25, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // NOMBRE ::= nombre string error NT$0 punto_coma 
            {
              Object RESULT =null;
              // propagate RESULT from NT$0
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("NOMBRE",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // USUARIO ::= usuario dos_puntos id punto_coma 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("USUARIO",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // USUARIO ::= usuario dos_puntos id error 
            {
              Object RESULT =null;
		parser.report_error("expected ';'", null);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("USUARIO",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // NT$1 ::= 
            {
              Object RESULT =null;
parser.report_error("expected ':'", null);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$1",26, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // USUARIO ::= usuario error NT$1 id punto_coma 
            {
              Object RESULT =null;
              // propagate RESULT from NT$1
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("USUARIO",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // RACIONES ::= raciones dos_puntos number punto_coma 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("RACIONES",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // RACIONES ::= raciones dos_puntos number error 
            {
              Object RESULT =null;
		parser.report_error("expected ';'", null);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("RACIONES",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // NT$2 ::= 
            {
              Object RESULT =null;
parser.report_error("expected ':'", null);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$2",27, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // RACIONES ::= raciones error NT$2 number punto_coma 
            {
              Object RESULT =null;
              // propagate RESULT from NT$2
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("RACIONES",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // TIEMPO_TOTAL ::= tiempo dos_puntos duracion punto_coma 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("TIEMPO_TOTAL",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // TIEMPO_TOTAL ::= tiempo dos_puntos duracion error 
            {
              Object RESULT =null;
		parser.report_error("expected ';'", null);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("TIEMPO_TOTAL",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // NT$3 ::= 
            {
              Object RESULT =null;
parser.report_error("expected ':'", null);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$3",28, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // TIEMPO_TOTAL ::= tiempo error NT$3 duracion punto_coma 
            {
              Object RESULT =null;
              // propagate RESULT from NT$3
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("TIEMPO_TOTAL",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // CALORIAS ::= calorias dos_puntos number punto_coma 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CALORIAS",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // CALORIAS ::= calorias dos_puntos number error 
            {
              Object RESULT =null;
		parser.report_error("expected ';'", null);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CALORIAS",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // NT$4 ::= 
            {
              Object RESULT =null;
parser.report_error("expected ':'", null);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$4",29, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // CALORIAS ::= calorias error NT$4 number punto_coma 
            {
              Object RESULT =null;
              // propagate RESULT from NT$4
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CALORIAS",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // CALORIAS ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CALORIAS",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // TIPO ::= tipo dos_puntos string punto_coma 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("TIPO",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // TIPO ::= tipo dos_puntos string error 
            {
              Object RESULT =null;
		parser.report_error("expected ';'", null);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("TIPO",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // NT$5 ::= 
            {
              Object RESULT =null;
parser.report_error("expected ':'", null);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$5",30, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // TIPO ::= tipo error NT$5 string punto_coma 
            {
              Object RESULT =null;
              // propagate RESULT from NT$5
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("TIPO",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // TIPO ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("TIPO",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // COCINA ::= cocina dos_puntos string punto_coma 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("COCINA",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // COCINA ::= cocina dos_puntos string error 
            {
              Object RESULT =null;
		parser.report_error("expected ';'", null);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("COCINA",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // NT$6 ::= 
            {
              Object RESULT =null;
parser.report_error("expected ':'", null);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$6",31, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // COCINA ::= cocina error NT$6 string punto_coma 
            {
              Object RESULT =null;
              // propagate RESULT from NT$6
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("COCINA",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // COCINA ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("COCINA",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // INSTRUCCION ::= PROGRAMAR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // INSTRUCCION ::= ANADIR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // INSTRUCCION ::= CALENTAR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // INSTRUCCION ::= REMOVER 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // INSTRUCCION ::= ACCION_USUARIO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // INSTRUCCION ::= SACAR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // PROGRAMAR ::= programar paren_izq TEMPERATURA coma VELOCIDAD coma timer INVERSO paren_der punto_coma 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PROGRAMAR",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // PROGRAMAR ::= programar paren_izq TEMPERATURA coma VELOCIDAD coma timer INVERSO paren_der error 
            {
              Object RESULT =null;
		parser.report_error("expected ';'", null);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PROGRAMAR",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // NT$7 ::= 
            {
              Object RESULT =null;
parser.report_error("expected '('", null);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$7",32, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // PROGRAMAR ::= programar error NT$7 TEMPERATURA coma VELOCIDAD coma timer INVERSO paren_der punto_coma 
            {
              Object RESULT =null;
              // propagate RESULT from NT$7
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PROGRAMAR",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // NT$8 ::= 
            {
              Object RESULT =null;
parser.report_error("expected ','", null);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$8",33, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // PROGRAMAR ::= programar paren_izq TEMPERATURA error NT$8 VELOCIDAD coma timer INVERSO paren_der punto_coma 
            {
              Object RESULT =null;
              // propagate RESULT from NT$8
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PROGRAMAR",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // NT$9 ::= 
            {
              Object RESULT =null;
parser.report_error("expected ','", null);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$9",34, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // PROGRAMAR ::= programar paren_izq TEMPERATURA coma VELOCIDAD error NT$9 timer INVERSO paren_der punto_coma 
            {
              Object RESULT =null;
              // propagate RESULT from NT$9
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PROGRAMAR",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // NT$10 ::= 
            {
              Object RESULT =null;
parser.report_error("expected ')'", null);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$10",35, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // PROGRAMAR ::= programar paren_izq TEMPERATURA coma VELOCIDAD coma timer INVERSO error NT$10 punto_coma 
            {
              Object RESULT =null;
              // propagate RESULT from NT$10
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PROGRAMAR",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // ANADIR ::= anadir paren_izq id paren_der punto_coma 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ANADIR",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // ANADIR ::= anadir paren_izq string paren_der punto_coma 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ANADIR",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // ANADIR ::= anadir paren_izq id paren_der error 
            {
              Object RESULT =null;
		parser.report_error("expected ';'", null);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ANADIR",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // ANADIR ::= anadir paren_izq string paren_der error 
            {
              Object RESULT =null;
		parser.report_error("expected ';'", null);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ANADIR",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // NT$11 ::= 
            {
              Object RESULT =null;
parser.report_error("expected '('", null);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$11",36, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // ANADIR ::= anadir error NT$11 id paren_der punto_coma 
            {
              Object RESULT =null;
              // propagate RESULT from NT$11
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ANADIR",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // NT$12 ::= 
            {
              Object RESULT =null;
parser.report_error("expected ')'", null);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$12",37, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // ANADIR ::= anadir paren_izq id error NT$12 punto_coma 
            {
              Object RESULT =null;
              // propagate RESULT from NT$12
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ANADIR",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // NT$13 ::= 
            {
              Object RESULT =null;
parser.report_error("expected '('", null);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$13",38, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // ANADIR ::= anadir error NT$13 string paren_der punto_coma 
            {
              Object RESULT =null;
              // propagate RESULT from NT$13
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ANADIR",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // NT$14 ::= 
            {
              Object RESULT =null;
parser.report_error("expected ')'", null);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$14",39, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // ANADIR ::= anadir paren_izq string error NT$14 punto_coma 
            {
              Object RESULT =null;
              // propagate RESULT from NT$14
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ANADIR",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // CALENTAR ::= calentar paren_izq TEMPERATURA coma timer paren_der punto_coma 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CALENTAR",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // CALENTAR ::= calentar paren_izq TEMPERATURA coma timer paren_der error 
            {
              Object RESULT =null;
		parser.report_error("expected ';'", null);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CALENTAR",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // NT$15 ::= 
            {
              Object RESULT =null;
parser.report_error("expected '('", null);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$15",40, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // CALENTAR ::= calentar error NT$15 TEMPERATURA coma timer paren_der punto_coma 
            {
              Object RESULT =null;
              // propagate RESULT from NT$15
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CALENTAR",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // NT$16 ::= 
            {
              Object RESULT =null;
parser.report_error("expected ')'", null);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$16",41, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // CALENTAR ::= calentar paren_izq TEMPERATURA coma timer error NT$16 punto_coma 
            {
              Object RESULT =null;
              // propagate RESULT from NT$16
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CALENTAR",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // REMOVER ::= remover paren_izq VELOCIDAD coma timer INVERSO paren_der punto_coma 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("REMOVER",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // REMOVER ::= remover paren_izq VELOCIDAD coma timer INVERSO paren_der error 
            {
              Object RESULT =null;
		parser.report_error("expected ';'", null);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("REMOVER",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // NT$17 ::= 
            {
              Object RESULT =null;
parser.report_error("expected ','", null);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$17",42, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // REMOVER ::= remover paren_izq VELOCIDAD error NT$17 timer INVERSO paren_der punto_coma 
            {
              Object RESULT =null;
              // propagate RESULT from NT$17
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("REMOVER",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // NT$18 ::= 
            {
              Object RESULT =null;
parser.report_error("expected '('", null);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$18",43, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // REMOVER ::= remover error NT$18 VELOCIDAD coma timer INVERSO paren_der punto_coma 
            {
              Object RESULT =null;
              // propagate RESULT from NT$18
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("REMOVER",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // NT$19 ::= 
            {
              Object RESULT =null;
parser.report_error("expected ')'", null);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$19",44, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // REMOVER ::= remover paren_izq VELOCIDAD coma timer INVERSO error NT$19 punto_coma 
            {
              Object RESULT =null;
              // propagate RESULT from NT$19
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("REMOVER",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // ACCION_USUARIO ::= string punto_coma 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ACCION_USUARIO",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // ACCION_USUARIO ::= string error 
            {
              Object RESULT =null;
		parser.report_error("expected ';'", null);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ACCION_USUARIO",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // SACAR ::= sacar paren_izq string paren_der punto_coma 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SACAR",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // SACAR ::= sacar paren_izq string paren_der error 
            {
              Object RESULT =null;
		parser.report_error("expected ';'", null);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("SACAR",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // NT$20 ::= 
            {
              Object RESULT =null;
parser.report_error("expected '('", null);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$20",45, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // SACAR ::= sacar error NT$20 string paren_der punto_coma 
            {
              Object RESULT =null;
              // propagate RESULT from NT$20
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SACAR",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // NT$21 ::= 
            {
              Object RESULT =null;
parser.report_error("expected ')'", null);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$21",46, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // SACAR ::= sacar paren_izq string error NT$21 punto_coma 
            {
              Object RESULT =null;
              // propagate RESULT from NT$21
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SACAR",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // INVERSO ::= coma inverso 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("INVERSO",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // INVERSO ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("INVERSO",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // INGREDIENTE ::= CANTIDAD id 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("INGREDIENTE",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // CANTIDAD ::= al_gusto 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CANTIDAD",24, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // CANTIDAD ::= number medida 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CANTIDAD",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // TEMPERATURA ::= temp 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("TEMPERATURA",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // TEMPERATURA ::= varoma 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("TEMPERATURA",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // VELOCIDAD ::= number 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("VELOCIDAD",22, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // VELOCIDAD ::= velocidad 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("VELOCIDAD",22, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
              return CUP$parser$do_action_part00000000(
                               CUP$parser$act_num,
                               CUP$parser$parser,
                               CUP$parser$stack,
                               CUP$parser$top);
    }
}

}
