/* The following code was generated by JFlex 1.7.0 */

/***********************************/
/*             PL - Lab            */
/*                                 */   
/*     Manjavacas Lucas, Antonio   */
/*     Márquez Villalta, Rubén     */     
/*     Pedregal Hidalgo, Diego     */
/*     Velasco Mata, Alberto       */
/***********************************/
package gachaneitor;

import java_cup.runtime.Symbol;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.Map;
import java.util.HashMap;

import java.lang.StringBuilder;

class Utils {
    /*** KEYWORD HANDLING ***/
    
    static Map<String, Integer> keywords = new HashMap<String, Integer>();
    static {
        keywords.put("menu", sym.menu);
        keywords.put("plato", sym.plato);
        keywords.put("info", sym.info);
        keywords.put("nombre", sym.nombre);
        keywords.put("usuario", sym.usuario);
        keywords.put("raciones", sym.raciones);
        keywords.put("tiempo", sym.tiempo);
        keywords.put("calorias", sym.calorias);
        keywords.put("tipo", sym.tipo);
        keywords.put("cocina", sym.cocina);
        keywords.put("programar", sym.programar);
        keywords.put("calentar", sym.calentar);
        keywords.put("remover", sym.remover);
        keywords.put("anadir", sym.anadir);
        keywords.put("sacar", sym.sacar);
        keywords.put("varoma", sym.varoma);
        keywords.put("cuchara", sym.velocidad);
        keywords.put("espiga", sym.velocidad);
        keywords.put("turbo", sym.velocidad);
        keywords.put("inverso", sym.inverso);
        keywords.put("l", sym.medida);
        keywords.put("ml", sym.medida);
        keywords.put("cucharada", sym.medida);
        keywords.put("g", sym.medida);
        keywords.put("ud", sym.medida);
        keywords.put("al_gusto", sym.al_gusto);
    }
    private static final ArrayList<String> velocidadKeywords = new ArrayList<>(Arrays.asList(
        "cuchara", "espiga", "turbo"
    ));
    private static final ArrayList<String> medidasKeywords = new ArrayList<>(Arrays.asList(
        "l", "ml", "cucharada", "g", "ud"
    ));
    
    public static boolean isKeyword(String cadena) {
        return keywords.containsKey(cadena);
    }

    public static String getTokenName(String keyword) {
        if(velocidadKeywords.contains(keyword)) {
            return "<VELOCIDAD>[" + keyword + "] ";
        }
        if(medidasKeywords.contains(keyword)) {
            return "<MEDIDA>[" + keyword + "] ";
        }
        if(keywords.containsKey(keyword))
            return "<" + keyword.toUpperCase() + "> ";
        return "NOT_A_KEYWORD[" + keyword + "] ";
    }
    public static int getToken(String cadena) {
        if(keywords.containsKey(cadena)) {
            return keywords.get(cadena);
        }
        return -1;
    }


    /*** ERROR HANDLING ***/
    public enum Error {
        ILLEGAL("Error: Illegal character '%s' at %d:%d\n"),
        INVALID_TIMER("Error: Invalid timer format '%s' at %d:%d\n"),
        STRING_END_EXPECTED("Error: %sUnclosed string starting at %d:%d\n"),
        COMMENT_START_EXPECTED("Error: %sUnexpected end of comment at %d:%d\n"),
        COMMENT_END_EXPECTED("Error: %sUnclosed comment starting at %d:%d\n");


        String message;
        private Error(String errorMessage) {
            message = errorMessage;
        }

        public String toString() {
            return message;
        }
    }

    public static void error(Error e, String content, int l, int c) {
        System.out.printf(e.toString(), content != null ? content : "", l+1, c+1);
    }

    /** DEBUG **/
    public static void debugLog(String debug) {
        // System.out.print(debug);
    }
    /** DEBUG **/
}




/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.7.0
 * from the specification file <tt>Gachaneitor.lex</tt>
 */
class Lexer implements java_cup.runtime.Scanner {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int STRING = 2;
  public static final int COMMENT = 4;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1,  1,  2, 2
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\5\1\3\1\1\1\25\1\25\1\2\16\5\4\0\1\3\1\0"+
    "\1\23\1\0\1\4\3\0\1\7\1\10\1\27\1\0\1\13\2\0"+
    "\1\24\12\15\1\6\1\14\5\0\2\4\1\22\27\4\4\0\1\4"+
    "\1\0\7\4\1\16\4\4\1\17\15\4\1\11\1\0\1\12\1\0"+
    "\6\5\1\26\32\5\2\0\4\4\4\0\1\4\2\0\1\5\2\0"+
    "\1\20\4\0\1\4\4\0\1\21\5\0\27\4\1\0\37\4\1\0"+
    "\u01ca\4\4\0\14\4\16\0\5\4\7\0\1\4\1\0\1\4\21\0"+
    "\160\5\5\4\1\0\2\4\2\0\4\4\1\0\1\4\6\0\1\4"+
    "\1\0\3\4\1\0\1\4\1\0\24\4\1\0\123\4\1\0\213\4"+
    "\1\0\5\5\2\0\246\4\1\0\46\4\2\0\1\4\7\0\47\4"+
    "\7\0\1\4\1\0\55\5\1\0\1\5\1\0\2\5\1\0\2\5"+
    "\1\0\1\5\10\0\33\4\5\0\3\4\15\0\6\5\5\0\1\4"+
    "\4\0\13\5\1\0\1\5\3\0\53\4\25\5\12\15\4\0\2\4"+
    "\1\5\143\4\1\0\1\4\10\5\1\0\6\5\2\4\2\5\1\0"+
    "\4\5\2\4\12\15\3\4\2\0\1\4\17\0\1\5\1\4\1\5"+
    "\36\4\33\5\2\0\131\4\13\5\1\4\16\0\12\15\41\4\11\5"+
    "\2\4\4\0\1\4\5\0\26\4\4\5\1\4\11\5\1\4\3\5"+
    "\1\4\5\5\22\0\31\4\3\5\4\0\13\4\65\0\25\4\1\0"+
    "\10\4\26\0\60\5\66\4\3\5\1\4\22\5\1\4\7\5\12\4"+
    "\2\5\2\0\12\15\1\0\20\4\3\5\1\0\10\4\2\0\2\4"+
    "\2\0\26\4\1\0\7\4\1\0\1\4\3\0\4\4\2\0\1\5"+
    "\1\4\7\5\2\0\2\5\2\0\3\5\1\4\10\0\1\5\4\0"+
    "\2\4\1\0\3\4\2\5\2\0\12\15\4\4\7\0\2\4\4\0"+
    "\3\5\1\0\6\4\4\0\2\4\2\0\26\4\1\0\7\4\1\0"+
    "\2\4\1\0\2\4\1\0\2\4\2\0\1\5\1\0\5\5\4\0"+
    "\2\5\2\0\3\5\3\0\1\5\7\0\4\4\1\0\1\4\7\0"+
    "\12\15\2\5\3\4\1\5\13\0\3\5\1\0\11\4\1\0\3\4"+
    "\1\0\26\4\1\0\7\4\1\0\2\4\1\0\5\4\2\0\1\5"+
    "\1\4\10\5\1\0\3\5\1\0\3\5\2\0\1\4\17\0\2\4"+
    "\2\5\2\0\12\15\1\0\1\4\7\0\1\4\6\5\1\0\3\5"+
    "\1\0\10\4\2\0\2\4\2\0\26\4\1\0\7\4\1\0\2\4"+
    "\1\0\5\4\2\0\1\5\1\4\7\5\2\0\2\5\2\0\3\5"+
    "\10\0\2\5\4\0\2\4\1\0\3\4\2\5\2\0\12\15\1\0"+
    "\1\4\20\0\1\5\1\4\1\0\6\4\3\0\3\4\1\0\4\4"+
    "\3\0\2\4\1\0\1\4\1\0\2\4\3\0\2\4\3\0\3\4"+
    "\3\0\14\4\4\0\5\5\3\0\3\5\1\0\4\5\2\0\1\4"+
    "\6\0\1\5\16\0\12\15\11\0\1\4\6\0\4\5\1\0\10\4"+
    "\1\0\3\4\1\0\27\4\1\0\20\4\3\0\1\4\7\5\1\0"+
    "\3\5\1\0\4\5\7\0\2\5\1\0\3\4\5\0\2\4\2\5"+
    "\2\0\12\15\20\0\1\4\3\5\1\0\10\4\1\0\3\4\1\0"+
    "\27\4\1\0\12\4\1\0\5\4\2\0\1\5\1\4\7\5\1\0"+
    "\3\5\1\0\4\5\7\0\2\5\7\0\1\4\1\0\2\4\2\5"+
    "\2\0\12\15\1\0\2\4\15\0\4\5\1\0\10\4\1\0\3\4"+
    "\1\0\51\4\2\5\1\4\7\5\1\0\3\5\1\0\4\5\1\4"+
    "\5\0\3\4\1\5\7\0\3\4\2\5\2\0\12\15\12\0\6\4"+
    "\2\0\2\5\1\0\22\4\3\0\30\4\1\0\11\4\1\0\1\4"+
    "\2\0\7\4\3\0\1\5\4\0\6\5\1\0\1\5\1\0\10\5"+
    "\6\0\12\15\2\0\2\5\15\0\60\4\1\5\2\4\7\5\4\0"+
    "\10\4\10\5\1\0\12\15\47\0\2\4\1\0\1\4\2\0\2\4"+
    "\1\0\1\4\2\0\1\4\6\0\4\4\1\0\7\4\1\0\3\4"+
    "\1\0\1\4\1\0\1\4\2\0\2\4\1\0\4\4\1\5\2\4"+
    "\6\5\1\0\2\5\1\4\2\0\5\4\1\0\1\4\1\0\6\5"+
    "\2\0\12\15\2\0\4\4\40\0\1\4\27\0\2\5\6\0\12\15"+
    "\13\0\1\5\1\0\1\5\1\0\1\5\4\0\2\5\10\4\1\0"+
    "\44\4\4\0\24\5\1\0\2\5\5\4\13\5\1\0\44\5\11\0"+
    "\1\5\71\0\53\4\24\5\1\4\12\15\6\0\6\4\4\5\4\4"+
    "\3\5\1\4\3\5\2\4\7\5\3\4\4\5\15\4\14\5\1\4"+
    "\1\5\12\15\4\5\2\0\46\4\1\0\1\4\5\0\1\4\2\0"+
    "\53\4\1\0\u014d\4\1\0\4\4\2\0\7\4\1\0\1\4\1\0"+
    "\4\4\2\0\51\4\1\0\4\4\2\0\41\4\1\0\4\4\2\0"+
    "\7\4\1\0\1\4\1\0\4\4\2\0\17\4\1\0\71\4\1\0"+
    "\4\4\2\0\103\4\2\0\3\5\40\0\20\4\20\0\126\4\2\0"+
    "\6\4\3\0\u026c\4\2\0\21\4\1\0\32\4\5\0\113\4\3\0"+
    "\13\4\7\0\15\4\1\0\4\4\3\5\13\0\22\4\3\5\13\0"+
    "\22\4\2\5\14\0\15\4\1\0\3\4\1\0\2\5\14\0\64\4"+
    "\40\5\3\0\1\4\3\0\2\4\1\5\2\0\12\15\41\0\4\5"+
    "\1\0\12\15\6\0\130\4\10\0\5\4\2\5\42\4\1\5\1\4"+
    "\5\0\106\4\12\0\37\4\1\0\14\5\4\0\14\5\12\0\12\15"+
    "\36\4\2\0\5\4\13\0\54\4\4\0\32\4\6\0\12\15\46\0"+
    "\27\4\5\5\4\0\65\4\12\5\1\0\35\5\2\0\1\5\12\15"+
    "\6\0\12\15\15\0\1\4\10\0\16\5\102\0\5\5\57\4\21\5"+
    "\7\4\4\0\12\15\21\0\11\5\14\0\3\5\36\4\15\5\2\4"+
    "\12\15\54\4\16\5\14\0\44\4\24\5\10\0\12\15\3\0\3\4"+
    "\12\15\44\4\2\0\11\4\107\0\3\5\1\0\25\5\4\4\1\5"+
    "\4\4\3\5\2\4\3\5\6\0\300\4\72\5\1\0\5\5\u0116\4"+
    "\2\0\6\4\2\0\46\4\2\0\6\4\2\0\10\4\1\0\1\4"+
    "\1\0\1\4\1\0\1\4\1\0\37\4\2\0\65\4\1\0\7\4"+
    "\1\0\1\4\3\0\3\4\1\0\7\4\3\0\4\4\2\0\6\4"+
    "\4\0\15\4\5\0\3\4\1\0\7\4\16\0\5\5\30\0\1\25"+
    "\1\25\5\5\20\0\2\4\23\0\1\4\13\0\5\5\1\0\12\5"+
    "\1\0\1\4\15\0\1\4\20\0\15\4\3\0\40\4\20\0\15\5"+
    "\4\0\1\5\3\0\14\5\21\0\1\4\4\0\1\4\2\0\12\4"+
    "\1\0\1\4\3\0\5\4\6\0\1\4\1\0\1\4\1\0\1\4"+
    "\1\0\4\4\1\0\13\4\2\0\4\4\5\0\5\4\4\0\1\4"+
    "\21\0\51\4\u0a77\0\57\4\1\0\57\4\1\0\205\4\6\0\4\4"+
    "\3\5\2\4\14\0\46\4\1\0\1\4\5\0\1\4\2\0\70\4"+
    "\7\0\1\4\17\0\1\5\27\4\11\0\7\4\1\0\7\4\1\0"+
    "\7\4\1\0\7\4\1\0\7\4\1\0\7\4\1\0\7\4\1\0"+
    "\7\4\1\0\40\5\57\0\1\4\u01d5\0\3\4\31\0\11\4\6\5"+
    "\1\0\5\4\2\0\5\4\4\0\126\4\2\0\2\5\2\0\3\4"+
    "\1\0\132\4\1\0\4\4\5\0\52\4\2\0\136\4\21\0\33\4"+
    "\65\0\20\4\u0200\0\u19b6\4\112\0\u51eb\4\25\0\u048d\4\103\0\56\4"+
    "\2\0\u010d\4\3\0\20\4\12\15\2\4\24\0\57\4\1\5\4\0"+
    "\12\5\1\0\37\4\2\5\120\4\2\5\45\0\11\4\2\0\147\4"+
    "\2\0\44\4\1\0\10\4\77\0\13\4\1\5\3\4\1\5\4\4"+
    "\1\5\27\4\5\5\20\0\1\4\7\0\64\4\14\0\2\5\62\4"+
    "\22\5\12\0\12\15\6\0\22\5\6\4\3\0\1\4\1\0\1\4"+
    "\2\0\12\15\34\4\10\5\2\0\27\4\15\5\14\0\35\4\3\0"+
    "\4\5\57\4\16\5\16\0\1\4\12\15\6\0\5\4\1\5\12\4"+
    "\12\15\5\4\1\0\51\4\16\5\11\0\3\4\1\5\10\4\2\5"+
    "\2\0\12\15\6\0\27\4\3\0\1\4\3\5\62\4\1\5\1\4"+
    "\3\5\2\4\2\5\5\4\2\5\1\4\1\5\1\4\30\0\3\4"+
    "\2\0\13\4\5\5\2\0\3\4\2\5\12\0\6\4\2\0\6\4"+
    "\2\0\6\4\11\0\7\4\1\0\7\4\1\0\53\4\1\0\12\4"+
    "\12\0\163\4\10\5\1\0\2\5\2\0\12\15\6\0\u2ba4\4\14\0"+
    "\27\4\4\0\61\4\u2104\0\u016e\4\2\0\152\4\46\0\7\4\14\0"+
    "\5\4\5\0\1\4\1\5\12\4\1\0\15\4\1\0\5\4\1\0"+
    "\1\4\1\0\2\4\1\0\2\4\1\0\154\4\41\0\u016b\4\22\0"+
    "\100\4\2\0\66\4\50\0\15\4\3\0\20\5\20\0\20\5\3\0"+
    "\2\4\30\0\3\4\31\0\1\4\6\0\5\4\1\0\207\4\2\0"+
    "\1\5\4\0\1\4\13\0\12\15\7\0\32\4\4\0\1\4\1\0"+
    "\32\4\13\0\131\4\3\0\6\4\2\0\6\4\2\0\6\4\2\0"+
    "\3\4\3\0\2\4\3\0\2\4\22\0\3\5\4\0\14\4\1\0"+
    "\32\4\1\0\23\4\1\0\2\4\1\0\17\4\2\0\16\4\42\0"+
    "\173\4\105\0\65\4\210\0\1\5\202\0\35\4\3\0\61\4\17\0"+
    "\1\5\37\0\40\4\15\0\36\4\5\0\46\4\5\5\5\0\36\4"+
    "\2\0\44\4\4\0\10\4\1\0\5\4\52\0\236\4\2\0\12\15"+
    "\6\0\44\4\4\0\44\4\4\0\50\4\10\0\64\4\234\0\u0137\4"+
    "\11\0\26\4\12\0\10\4\230\0\6\4\2\0\1\4\1\0\54\4"+
    "\1\0\2\4\3\0\1\4\2\0\27\4\12\0\27\4\11\0\37\4"+
    "\101\0\23\4\1\0\2\4\12\0\26\4\12\0\32\4\106\0\70\4"+
    "\6\0\2\4\100\0\1\4\3\5\1\0\2\5\5\0\4\5\4\4"+
    "\1\0\3\4\1\0\33\4\4\0\3\5\4\0\1\5\40\0\35\4"+
    "\3\0\35\4\43\0\10\4\1\0\34\4\2\5\31\0\66\4\12\0"+
    "\26\4\12\0\23\4\15\0\22\4\156\0\111\4\67\0\63\4\15\0"+
    "\63\4\u030d\0\3\5\65\4\17\5\37\0\12\15\17\0\4\5\55\4"+
    "\13\5\2\0\1\5\22\0\31\4\7\0\12\15\6\0\3\5\44\4"+
    "\16\5\1\0\12\15\20\0\43\4\1\5\2\0\1\4\11\0\3\5"+
    "\60\4\16\5\4\4\5\0\3\5\3\0\12\15\1\4\1\0\1\4"+
    "\43\0\22\4\1\0\31\4\14\5\6\0\1\5\101\0\7\4\1\0"+
    "\1\4\1\0\4\4\1\0\17\4\1\0\12\4\7\0\57\4\14\5"+
    "\5\0\12\15\6\0\4\5\1\0\10\4\2\0\2\4\2\0\26\4"+
    "\1\0\7\4\1\0\2\4\1\0\5\4\2\0\1\5\1\4\7\5"+
    "\2\0\2\5\2\0\3\5\2\0\1\4\6\0\1\5\5\0\5\4"+
    "\2\5\2\0\7\5\3\0\5\5\213\0\65\4\22\5\4\4\5\0"+
    "\12\15\46\0\60\4\24\5\2\4\1\0\1\4\10\0\12\15\246\0"+
    "\57\4\7\5\2\0\11\5\27\0\4\4\2\5\42\0\60\4\21\5"+
    "\3\0\1\4\13\0\12\15\46\0\53\4\15\5\10\0\12\15\66\0"+
    "\32\4\3\0\17\5\4\0\12\15\u0166\0\100\4\12\15\25\0\1\4"+
    "\u0100\0\1\4\12\5\50\4\7\5\1\4\4\5\10\0\1\5\10\0"+
    "\1\4\13\5\50\4\2\0\4\4\20\5\46\0\71\4\u0107\0\11\4"+
    "\1\0\45\4\10\5\1\0\10\5\1\4\17\0\12\15\30\0\36\4"+
    "\2\0\26\5\1\0\16\5\111\0\7\4\1\0\2\4\1\0\46\4"+
    "\6\5\3\0\1\5\1\0\2\5\1\0\7\5\1\4\1\5\10\0"+
    "\12\5\u02a6\0\u039a\4\146\0\157\4\21\0\304\4\u0abc\0\u042f\4\u0fd1\0"+
    "\u0247\4\u21b9\0\u0239\4\7\0\37\4\1\0\12\15\146\0\36\4\2\0"+
    "\5\5\13\0\60\4\7\5\11\0\4\4\14\0\12\15\11\0\25\4"+
    "\5\0\23\4\u0370\0\105\4\13\0\1\4\56\5\20\0\4\5\15\4"+
    "\100\0\2\4\36\0\u17ed\4\23\0\u02f3\4\u250d\0\u011f\4\121\0\u018c\4"+
    "\u0904\0\153\4\5\0\15\4\3\0\11\4\7\0\12\4\3\0\2\5"+
    "\1\0\4\5\u14c1\0\5\5\3\0\26\5\2\0\7\5\36\0\4\5"+
    "\224\0\3\5\u01bb\0\125\4\1\0\107\4\1\0\2\4\2\0\1\4"+
    "\2\0\2\4\2\0\4\4\1\0\14\4\1\0\1\4\1\0\7\4"+
    "\1\0\101\4\1\0\4\4\2\0\10\4\1\0\7\4\1\0\34\4"+
    "\1\0\4\4\1\0\5\4\1\0\1\4\3\0\7\4\1\0\u0154\4"+
    "\2\0\31\4\1\0\31\4\1\0\37\4\1\0\31\4\1\0\37\4"+
    "\1\0\31\4\1\0\37\4\1\0\31\4\1\0\37\4\1\0\31\4"+
    "\1\0\10\4\2\0\62\15\u0200\0\67\5\4\0\62\5\10\0\1\5"+
    "\16\0\1\5\26\0\5\5\1\0\17\5\u0550\0\7\5\1\0\21\5"+
    "\2\0\7\5\1\0\2\5\1\0\5\5\u07d5\0\305\4\13\0\7\5"+
    "\51\0\104\4\7\5\5\0\12\15\u04a6\0\4\4\1\0\33\4\1\0"+
    "\2\4\1\0\1\4\2\0\1\4\1\0\12\4\1\0\4\4\1\0"+
    "\1\4\1\0\1\4\6\0\1\4\4\0\1\4\1\0\1\4\1\0"+
    "\1\4\1\0\3\4\1\0\2\4\1\0\1\4\2\0\1\4\1\0"+
    "\1\4\1\0\1\4\1\0\1\4\1\0\1\4\1\0\2\4\1\0"+
    "\1\4\2\0\4\4\1\0\7\4\1\0\4\4\1\0\4\4\1\0"+
    "\1\4\1\0\12\4\1\0\21\4\5\0\3\4\1\0\5\4\1\0"+
    "\21\4\u1144\0\ua6d7\4\51\0\u1035\4\13\0\336\4\2\0\u1682\4\16\0"+
    "\u1d31\4\u0c1f\0\u021e\4\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\u05ee\0"+
    "\1\5\36\0\140\5\200\0\360\5\uffff\0\uffff\0\ufe12\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\3\0\1\1\2\2\1\3\1\4\1\5\1\6\1\7"+
    "\1\10\1\11\1\12\1\13\1\14\1\15\1\1\1\16"+
    "\1\1\1\17\1\20\1\3\1\21\1\14\1\0\1\22"+
    "\1\0\1\23\1\0\1\24\1\25\1\26\1\21\1\14"+
    "\1\0\2\27\1\21\1\30";

  private static int [] zzUnpackAction() {
    int [] result = new int[40];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\30\0\60\0\110\0\110\0\140\0\110\0\170"+
    "\0\220\0\110\0\110\0\110\0\110\0\110\0\110\0\250"+
    "\0\110\0\300\0\110\0\330\0\110\0\110\0\360\0\220"+
    "\0\u0108\0\u0120\0\110\0\u0138\0\110\0\u0150\0\110\0\110"+
    "\0\110\0\u0168\0\u0180\0\u0198\0\110\0\u01b0\0\u01c8\0\220";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[40];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\4\1\5\1\6\1\7\1\10\1\4\1\11\1\12"+
    "\1\13\1\14\1\15\1\16\1\17\1\20\2\10\1\4"+
    "\2\10\1\21\1\22\2\23\1\24\2\25\1\23\20\25"+
    "\1\26\1\25\2\23\1\25\2\7\1\23\22\7\2\23"+
    "\1\27\31\0\1\5\32\0\2\10\7\0\3\10\1\0"+
    "\2\10\3\0\1\10\16\0\1\30\20\0\1\30\6\0"+
    "\1\31\1\32\1\33\2\34\1\35\31\0\1\36\2\0"+
    "\1\37\24\0\1\40\27\0\1\41\11\0\1\42\6\0"+
    "\1\43\1\32\1\33\2\34\1\35\22\0\1\44\34\0"+
    "\1\35\5\0\1\36\1\45\1\46\22\36\2\0\1\36"+
    "\15\0\1\47\20\0\1\30\6\0\1\43\1\32\1\33"+
    "\2\34\1\35\22\0\1\44\1\0\1\33\11\0\1\45"+
    "\43\0\1\50\12\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[480];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\3\0\2\11\1\1\1\11\2\1\6\11\1\1\1\11"+
    "\1\1\1\11\1\1\2\11\3\1\1\0\1\11\1\0"+
    "\1\11\1\0\3\11\2\1\1\0\1\11\3\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[40];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true iff the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true iff the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;
  
  /** 
   * The number of occupied positions in zzBuffer beyond zzEndRead.
   * When a lead/high surrogate has been read from the input stream
   * into the final zzBuffer position, this will have a value of 1;
   * otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /* user code: */
    private StringBuilder cadena = new StringBuilder();
    private int initLine = -1, initColumn = -1;

    private Symbol symbol(int type) {
        return new Symbol(type, yyline, yycolumn);
    }


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  Lexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x110000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 3406) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException("Reader returned 0 characters. See JFlex examples for workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      /* If numRead == requested, we might have requested to few chars to
         encode a full Unicode character. We assume that a Reader would
         otherwise never return half characters. */
      if (numRead == requested) {
        if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    zzFinalHighSurrogate = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE)
      zzBuffer = new char[ZZ_BUFFERSIZE];
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
      yyclose();
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public java_cup.runtime.Symbol next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':  // fall through
        case '\u000C':  // fall through
        case '\u0085':  // fall through
        case '\u2028':  // fall through
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
            zzDoEOF();
            switch (zzLexicalState) {
            case STRING: {
              Utils.error(Utils.Error.STRING_END_EXPECTED, null, initLine, initColumn); return symbol(YYEOF);
            }  // fall though
            case 41: break;
            case COMMENT: {
              Utils.error(Utils.Error.COMMENT_END_EXPECTED, null, initLine, initColumn); return symbol(YYEOF);
            }  // fall though
            case 42: break;
            default:
          { return new java_cup.runtime.Symbol(sym.EOF); }
        }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { Utils.error(Utils.Error.ILLEGAL, yytext(), yyline, yycolumn);
            } 
            // fall through
          case 25: break;
          case 2: 
            { /* ignore */ /**DEBUG**/Utils.debugLog("\n");/**DEBUG**/
            } 
            // fall through
          case 26: break;
          case 3: 
            { /* ignore */
            } 
            // fall through
          case 27: break;
          case 4: 
            { if(Utils.isKeyword(yytext())) {
                Utils.debugLog(Utils.getTokenName(yytext()));
                return symbol(Utils.getToken(yytext()));
            } else {
                Utils.debugLog("<ID>[" + yytext() + "] ");
                return symbol(sym.id);
            }
            } 
            // fall through
          case 28: break;
          case 5: 
            { Utils.debugLog("<:> "); return symbol(sym.dos_puntos);
            } 
            // fall through
          case 29: break;
          case 6: 
            { Utils.debugLog("<(> "); return symbol(sym.paren_izq);
            } 
            // fall through
          case 30: break;
          case 7: 
            { Utils.debugLog("<)> "); return symbol(sym.paren_der);
            } 
            // fall through
          case 31: break;
          case 8: 
            { Utils.debugLog("<{> "); return symbol(sym.llave_izq);
            } 
            // fall through
          case 32: break;
          case 9: 
            { Utils.debugLog("<}> "); return symbol(sym.llave_der);
            } 
            // fall through
          case 33: break;
          case 10: 
            { Utils.debugLog("<,> "); return symbol(sym.coma);
            } 
            // fall through
          case 34: break;
          case 11: 
            { Utils.debugLog("<;> "); return symbol(sym.punto_coma);
            } 
            // fall through
          case 35: break;
          case 12: 
            { Utils.debugLog("<NUMERO>[" + yytext() + "] "); return symbol(sym.number);
            } 
            // fall through
          case 36: break;
          case 13: 
            { cadena.setLength(0); initLine = yyline; initColumn = yycolumn; yybegin(STRING);
            } 
            // fall through
          case 37: break;
          case 14: 
            { System.out.print(yytext());
            } 
            // fall through
          case 38: break;
          case 15: 
            { cadena.append(yytext());
            } 
            // fall through
          case 39: break;
          case 16: 
            { Utils.debugLog("<CADENA>[" + cadena.toString() + "] "); yybegin(YYINITIAL); return symbol(sym.string);
            } 
            // fall through
          case 40: break;
          case 17: 
            { Utils.error(Utils.Error.INVALID_TIMER, yytext(), yyline, yycolumn); return symbol(sym.timer);
            } 
            // fall through
          case 41: break;
          case 18: 
            { Utils.debugLog("<DURACION>[" + yytext() + "] "); return symbol(sym.duracion);
            } 
            // fall through
          case 42: break;
          case 19: 
            { Utils.debugLog("<TEMP>[" + yytext() + "] "); return symbol(sym.temp);
            } 
            // fall through
          case 43: break;
          case 20: 
            { initLine = yyline; initColumn = yycolumn; yybegin(COMMENT);
            } 
            // fall through
          case 44: break;
          case 21: 
            { Utils.error(Utils.Error.COMMENT_START_EXPECTED, null, yyline, yycolumn);
            } 
            // fall through
          case 45: break;
          case 22: 
            { yybegin(YYINITIAL);
            } 
            // fall through
          case 46: break;
          case 23: 
            { /* (one line comment) ignore */
            } 
            // fall through
          case 47: break;
          case 24: 
            { Utils.debugLog("<TEMPORIZADOR>[" + yytext() + "] "); return symbol(sym.timer);
            } 
            // fall through
          case 48: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }

  /**
   * Runs the scanner on input files.
   *
   * This is a standalone scanner, it will print any unmatched
   * text to System.out unchanged.
   *
   * @param argv   the command line, contains the filenames to run
   *               the scanner on.
   */
  public static void main(String argv[]) {
    if (argv.length == 0) {
      System.out.println("Usage : java Lexer [ --encoding <name> ] <inputfile(s)>");
    }
    else {
      int firstFilePos = 0;
      String encodingName = "UTF-8";
      if (argv[0].equals("--encoding")) {
        firstFilePos = 2;
        encodingName = argv[1];
        try {
          java.nio.charset.Charset.forName(encodingName); // Side-effect: is encodingName valid? 
        } catch (Exception e) {
          System.out.println("Invalid encoding '" + encodingName + "'");
          return;
        }
      }
      for (int i = firstFilePos; i < argv.length; i++) {
        Lexer scanner = null;
        try {
          java.io.FileInputStream stream = new java.io.FileInputStream(argv[i]);
          java.io.Reader reader = new java.io.InputStreamReader(stream, encodingName);
          scanner = new Lexer(reader);
          while ( !scanner.zzAtEOF ) scanner.next_token();
        }
        catch (java.io.FileNotFoundException e) {
          System.out.println("File not found : \""+argv[i]+"\"");
        }
        catch (java.io.IOException e) {
          System.out.println("IO error scanning file \""+argv[i]+"\"");
          System.out.println(e);
        }
        catch (Exception e) {
          System.out.println("Unexpected exception:");
          e.printStackTrace();
        }
      }
    }
  }


}
